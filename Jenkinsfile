pipeline {
    agent any
    environment {
        BACKEND_IMAGE = 'backend-image'
        FRONTEND_IMAGE = 'frontend-image'
    }
    parameters {
        string(
            name: 'IDENTIFICATION_MESSAGE',
            defaultValue: '',
            description: 'The identification message to be used in the Docker image and its further artifacts'
        )
    }
    stages {
        stage('Synchronizing the Repository') {
            steps {
                checkout scm
            }
        }
        stage('Building Phase of Docker Images') {
            parallel {
                stage('Backend Building') {
                    steps {
                        script {
                            def identificationMessage = params.IDENTIFICATION_MESSAGE ?: sh(returnStdout: true, script: 'git log -1 --oneline').trim().tokenize()[0]
                            sh("echo 'Building Backend image with identification message: ${identificationMessage}'")
                            sh("docker build -t ${env.BACKEND_IMAGE}:${env.GIT_BRANCH}-${identificationMessage} -f Dockerfile.Backend .")
                        }
                    }
                }
                stage('Frontend Building') {
                    steps {
                        script {
                            def identificationMessage = params.IDENTIFICATION_MESSAGE ?: sh(returnStdout: true, script: 'git log -1 --oneline').trim().tokenize()[0]
                            sh("echo 'Building Frontend image with identification message: ${identificationMessage}'")
                            sh("docker build -t ${env.FRONTEND_IMAGE}:${env.GIT_BRANCH}-${identificationMessage} -f Dockerfile.Frontend .")
                        }
                    }
                }
            }
        }
        stage('Verification Of Build') {
            steps {
                script {
                    if (currentBuild.result == 'FAILURE' || currentBuild.result == 'UNSTABLE') {
                        sh("echo 'Error is there Due to previous stages, as a Build-Status as ${currentBuild.result}'")
                        error('Aborting pipeline due to build errors.')
                    } else {
                        sh('echo "Till now Process of Building the Build files has been int to SUCCESS."')
                    }
                }
            }
        }
        stage('Vulnerability Scanning the Images Parallely') {
            parallel {
                stage('Scanning Backend Image') {
                    steps {
                        script {
                            def identificationMessage = params.IDENTIFICATION_MESSAGE ?: sh(returnStdout: true, script: 'git log -1 --oneline').trim().tokenize()[0]
                            sh("echo 'Scanning Backend image with identification message: ${identificationMessage}'")
                            docker.image('aquasec/trivy:latest').inside('--entrypoint=""') {
                                sh("trivy image ${env.BACKEND_IMAGE}:${env.GIT_BRANCH}-${identificationMessage} --format json --output /tmp/backend-scan-${identificationMessage}.json")
                            }
                        }
                    }
                }
                stage('Scanning Frontend Image') {
                    steps {
                        script {
                            def identificationMessage = params.IDENTIFICATION_MESSAGE ?: sh(returnStdout: true, script: 'git log -1 --oneline').trim().tokenize()[0]
                            sh("echo 'Scanning Frontend image with identification message: ${identificationMessage}'")
                            docker.image('aquasec/trivy:latest').inside('--entrypoint=""') {
                                sh("trivy image ${env.FRONTEND_IMAGE}:${env.GIT_BRANCH}-${identificationMessage} --format json --output /tmp/frontend-scan-${identificationMessage}.json")
                            }
                        }
                    }
                }
            }
        }

        stage('Archive Results We Got') {
            steps {
                // will specify later
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
