pipeline {
    agent any
    environment {
        BACKEND_IMAGE = 'backend-image'
        FRONTEND_IMAGE = 'frontend-image'
    }
    parameter{
        string{
            name:'IDENTIFICATION_MESSAGE',
            defaultValue:'',
            description: 'The identification message to be used in the Docker image and its further artifacts'
        }
    }
    environment{
        IDENTIFICATION_MESSAGE_ENV = sh(returnStdout: true, script:'git log -1 --oneline').trim().tokenize()[0]
    }
    stages {
        stage('Syncronizing the Repository') {
            steps {
                checkout scm
            }
        }
        stage {
            parallel {
                stage('Backend Building') {
                    agent { label 'linux' }
                    steps {
                        script {
                            if(params.IDENTIFICATION_MESSAGE){
                                sh('echo "Building backend image with identification message: ${params.IDENTIFICATION_MESSAGE}"')
                                docker.build("${env.BACKEND_IMAGE}:${IDENTIFICATION_MESSAGE}", '-f Dockerfile.Backend .')
                            }
                            else{
                                sh('echo "Building backend image with Latest Commit-ID"')
                                docker.build("${env.BACKEND_IMAGE}:${IDENTIFICATION_MESSAGE_ENV}", '-f Dockerfile.Backend .')

                            }
                        }
                    }
                }
                stage('Frontend Building') {
                    agent { label 'linux' }
                    steps{
                        script{
                            if(params.IDENTIFICATION_MESSAGE){
                                sh('echo "Building backend image with identification message: ${params.IDENTIFICATION_MESSAGE}"')
                                docker.build("${env.FRONTEND_IMAGE}:${IDENTIFICATION_MESSAGE}", '-f Dockerfile.Frontend .')
                            }
                            else{
                                sh('echo "Building Frontend image with Latest Commit-ID"')
                                docker.build("${env.FRONTEND_IMAGE}:${IDENTIFICATION_MESSAGE_ENV}", '-f Dockerfile.Frontend .')

                            }                        }
                        }
                    }
                stage('Verification Of Build'){
                    steps{
                        script{
                            if(currentBuild.result == 'FALIURE' || currentBuild.result == 'UNSTABLE'){
                                echo 'Error is there Due to previous Stages, as a Build-Status as ${currentBuild.result}'
                                error('Aborting pipeline due to build errors.')
                            }
                        }
                    }
                }
                }
            }
        }
    }
