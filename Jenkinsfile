pipeline {
    agent any
    environment {
        BACKEND_IMAGE = 'backend-image'
        FRONTEND_IMAGE = 'frontend-image'
    }
    parameters {
        string(
            name: 'IDENTIFICATION_MESSAGE',
            defaultValue: '',
            description: 'The identification message to be used in the Docker image and its further artifacts'
        )
    }
    stages {
        stage('Synchronizing the Repository') {
            steps {
                checkout scm
                script {
                    if (fileExists('../artifacts')) {
                        sh 'rm -rf ../artifacts'
                    }
                    sh 'mkdir ../artifacts'
                }
            }
        }
        stage('Building Phase of Docker Images') {
            parallel {
                stage('Backend Building') {
                    steps {
                        script {
                            def identificationMessage = params.IDENTIFICATION_MESSAGE ?: sh(returnStdout: true, script: 'git log -1 --oneline').trim().tokenize()[0]
                            sh("echo 'Building Backend image with identification message: ${identificationMessage}'")
                            sh("docker build -t ${env.BACKEND_IMAGE}:main-${identificationMessage} -f Dockerfile.Backend .")
                        }
                    }
                }
                stage('Frontend Building') {
                    steps {
                        script {
                            def identificationMessage = params.IDENTIFICATION_MESSAGE ?: sh(returnStdout: true, script: 'git log -1 --oneline').trim().tokenize()[0]
                            sh("echo 'Building Frontend image with identification message: ${identificationMessage}'")
                            sh("docker build -t ${env.FRONTEND_IMAGE}:main-${identificationMessage} -f Dockerfile.Frontend .")
                        }
                    }
                }
            }
        }
        stage('Verification Of Build') {
            steps {
                script {
                    if (currentBuild.result == 'FAILURE' || currentBuild.result == 'UNSTABLE') {
                        sh("echo 'Error is there Due to previous stages, as a Build-Status as ${currentBuild.result}'")
                        error('Aborting pipeline due to build errors.')
                    } else {
                        sh('echo "Till now Process of Building the Build files has been int to SUCCESS."')
                    }
                }
            }
        }
        stage('Vulnerability Scanning the Images Parallely') {
            parallel {
                stage('Scanning Backend Image') {
                    steps {
                        script {
                            def identificationMessage = params.IDENTIFICATION_MESSAGE ?: sh(returnStdout: true, script: 'git log -1 --oneline').trim().tokenize()[0]
                            sh("echo 'Scanning Backend image with identification message: ${identificationMessage}'")
                            docker.image('aquasec/trivy:latest').inside('--entrypoint=""') {
                                sh("trivy image ${env.BACKEND_IMAGE}:main-${identificationMessage} --format json --output /var/jenkins_home/workspace/artifacts/backend-scan-${identificationMessage}.json")
                            }
                        }
                    }
                }
                stage('Scanning Frontend Image') {
                    steps {
                        script {
                            def identificationMessage = params.IDENTIFICATION_MESSAGE ?: sh(returnStdout: true, script: 'git log -1 --oneline').trim().tokenize()[0]
                            sh("echo 'Scanning Frontend image with identification message: ${identificationMessage}'")
                            docker.image('aquasec/trivy:latest').inside('--entrypoint=""') {
                                sh("trivy image ${env.FRONTEND_IMAGE}:main-${identificationMessage} --format json --output /var/jenkins_home/workspace/artifacts/frontend-scan-${identificationMessage}.json")
                            }
                        }
                    }
                }
            }
        }

        stage('Archive Results We Got') {
            steps {
                // will specify later
                sh("echo 'Archived the Results'")
                sh('ls ../artifacts/')
            }
        }
    }
    post {
        always {
            echo 'Pipeline has been Executed with Respective Status Message.'
        }
        success {
            script {
            def webhookUrl = 'https://affinsys.webhook.office.com/webhookb2/5f8ba9d1-88ee-429d-aeb9-2281127a1614@ff6a797c-4692-4d8d-95cf-5f0481069b29/IncomingWebhook/1e149cd6a8b44d0aa4291e6bac382bd3/cba5f29e-eb60-42e0-b81b-80f2ed65b66f'
            
            // Send message
            sh """
                curl -H 'Content-Type: application/json' -d '{
                    "text": "Build job completed successfully. See attached reports."
                }' '${webhookUrl}'
            """
            
            // Send files
            sh """
                for file in ../artifacts/*.json; do
                    curl -F "file=@\$file" '${webhookUrl}'
                done
            """
        }
        }
        failure {
            echo 'Pipeline failed Successfully.'
        }
    }
}